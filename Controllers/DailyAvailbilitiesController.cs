using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Doctor_Appointment.Data;
using Doctor_Appointment.Repo;
using Doctor_Appointment.Models;

namespace Doctor_Appointment.Controllers
{
    public class DailyAvailbilitiesController : Controller
    {
        private readonly ApplicationDbContext _context;

        public IDailyAvailbilityRepo Daily { get; }

        public DailyAvailbilitiesController(ApplicationDbContext context , IDailyAvailbilityRepo daily)
        {
            _context = context;
            Daily = daily;
        }

        // GET: DailyAvailbilities
        public IActionResult Index(int docid)
        {
            try
            {
                //return View(Daily.GetAll());
                return View(Daily.GetAll(docid));
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return View();
        }

        // GET: DailyAvailbilities/Details/5
        public IActionResult Details(int id)
        {
            if (Daily.CheckExistance(id))
            {
            return View(Daily.GetById(id));
            }
            return View();

        }

        // GET: DailyAvailbilities/Create
        public IActionResult Create(int docId)
        {
            ViewData["DoctorID"] = new SelectList(_context.Doctors, "DoctorID", "FullName");
            return View();
        }

        // POST: DailyAvailbilities/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(DailyAvailbility dailyAvailbility)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    
                    string AutoGeneratedDate = null;

                    //AutoGenerating Date based on choose day and time 
                    //if time of current day more than time of selected date
                    //then generate date of selected day for next week 
                    //else Generate date of current week for selected day

                    if (DateTime.Now.TimeOfDay >= dailyAvailbility.Clinic_Time)
                    {
                        AutoGeneratedDate = DateOnly.FromDateTime(DateTime.Now).AddDays((int)(dailyAvailbility.Day) - Convert.ToInt16(DateTime.Now.DayOfWeek)+7).ToString();
                    }
                    else
                    {

                        AutoGeneratedDate = DateOnly.FromDateTime(DateTime.Now).AddDays((int)(dailyAvailbility.Day) - Convert.ToInt16(DateTime.Now.DayOfWeek)).ToString();
                    }
                    dailyAvailbility.Date =DateTime.Parse(AutoGeneratedDate);

                Daily.Insert(dailyAvailbility);
                Index(dailyAvailbility.DoctorID);
                return View("Index");
                }
                catch(Exception ex) 
                {
                    throw new Exception(ex.Message);
                }
            }
            return View(dailyAvailbility);
        }

        // GET: DailyAvailbilities/Edit/5
        public IActionResult Edit(int id, int DocId)
        {
            ViewData["DoctorID"] = new SelectList(_context.Doctors.Where(d => d.DoctorID==DocId), "DoctorID", "FullName");

            if ( _context.dailyAvailbilities == null)
            {
                return NotFound();
            }

            if (Daily.CheckExistance(id))
            {
            return View(Daily.GetById(id));
            }
            return NotFound();
        }

        // POST: DailyAvailbilities/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(int id, DailyAvailbility dailyAvailbility)
        {
            if (id != dailyAvailbility.Dayid)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    Daily.Update(id, dailyAvailbility);
                    Index(dailyAvailbility.DoctorID);
                    return View("Index");
                }
                catch 
                {
                    throw new Exception();
                }
                return RedirectToAction(nameof(Index));
            }
            return View(dailyAvailbility);
        }

        // GET: DailyAvailbilities/Delete/5
        public IActionResult Delete(int id)
        {

            if (Daily.CheckExistance(id))
            {
            return View(Daily.GetById(id));
            }
            return View();

        }

        // POST: DailyAvailbilities/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id, int docid)
        {
            if (Daily.CheckExistance(id))
            {
                try
                {
                  Daily.Delete(id);
                  Index(docid);
                  return View("Index");
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }
            }
            
            return RedirectToAction(nameof(Index));
        }

    }
}
